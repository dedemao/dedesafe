<module>
<baseinfo>
name=织梦安全助手
team=织梦猫
time=2018-03-04
email=admin@dedemao.com
url=https://www.dedemao.com
hash=40535557bfa3eb383a7e6cef0df3fec8
indexname=
indexurl=
ismember=0
autosetup=1
autodel=1
lang=gb2312
moduletype=plus
</baseinfo>
<systemfile>
<menustring>

</menustring>
<readme>
PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPjxwIHN0eWxlPSdsaW5lLWhlaWdodDoxNTAlJz48cCBzdHlsZT0nbGluZS1oZWlnaHQ6MTUwJSc+PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPjxwIHN0eWxlPSdsaW5lLWhlaWdodDoxNTAlJz48cCBzdHlsZT0nbGluZS1oZWlnaHQ6MTUwJSc+PHAgc3R5bGU9J2xpbmUtaGVpZ2h0OjE1MCUnPs6i0MWwssir1vrK1jwvcD48L3A+PC9wPjxiciAvPjxiciAvPjxiciAvPjxiciAvPg0KPC9wPjxiciAvPjxiciAvPjxiciAvPg0KPHA+PGEgaHJlZj0naHR0cDovL3d3dy5kZWRlbWFvLmNvbS9kZWRlcGx1Zy9kZWRlc2FmZS5odG1sJz7P6sfpss68+zwvYT48L3A+PC9wPjwvcD48L3A+
</readme>
<setupsql40>
RGVsZXRlIEZyb20gYCNAX19wbHVzYCB3aGVyZSBwbHVzbmFtZSBsaWtlICfWr8POsLLIq9b6ytYnOw0KSU5TRVJUIElOVE8gYCNAX19wbHVzYCAoYHBsdXNuYW1lYCwgYG1lbnVzdHJpbmdgLCBgbWFpbnVybGAsIGB3cml0ZXJgLCBgaXNzaG93YCwgYGZpbGVsaXN0YCkgVkFMVUVTICgn1q/DzrCyyKvW+srWJywgJzxtOml0ZW0gbmFtZT0nJ9avw86wssir1vrK1icnIGxpbms9JydkZWRlc2FmZS5waHAnJyByYW5rPScncGx1c19zdGFyZ2V0PScnbWFpbicnIC8+JywgJycsICfWr8POw6gnLCAxLCAnZGVkZXNhZmUucGhwJyk7
</setupsql40>
<delsql>
RGVsZXRlIEZyb20gYCNAX19wbHVzYCB3aGVyZSBwbHVzbmFtZSBsaWtlICfWr8POsLLIq9b6ytYnOw==
</delsql>
<setup>

</setup>
<uninstall>

</uninstall>
<oldfilelist>
dedesafe.php
dedesafe_rename.php
../plus/dedesafe.php
</oldfilelist>
</systemfile>

<modulefiles>
<file type='file' name='dedesafe.php'>

</file>
<file type='file' name='dedesafe_rename.php'>
PD9waHANCmhlYWRlcigiQ29udGVudC10eXBlOnRleHQvaHRtbDsgQ2hhcnNldD1nYmsiKTsNCmRlZmluZSgnREVERVBBVEgnLCBzdHJfcmVwbGFjZSgiXFwiLCAnLycsIGRpcm5hbWUoX19GSUxFX18pICkgKTsNCg0KaWYoJF9HRVRbJ25hbWUnXT09J2RhdGEnKXsNCiAgICBjaGVja1dyaXRlKCk7DQoNCiAgICAkbmV3bmFtZSA9ICdkYXRhXycudW5pcWlkKCk7DQogICAgJHJlc3VsdCA9IHJlbmFtZSgnLi4vZGF0YScsJy4uLycuJG5ld25hbWUpOw0KICAgIGlmKCRyZXN1bHQpew0KICAgICAgICAkY29udGVudCA9IHJlYWRGaWxlQ29udGVudChERURFUEFUSC4nLy4uL2luY2x1ZGUvY29tbW9uLmluYy5waHAnKTsNCiAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgiREVERVJPT1QuJy9kYXRhJyIsIkRFREVST09ULicveyRuZXduYW1lfSciLCRjb250ZW50KTsNCiAgICAgICAgd3JpdGVGaWxlQ29udGVudChERURFUEFUSC4nLy4uL2luY2x1ZGUvY29tbW9uLmluYy5waHAnLCRjb250ZW50KTsNCiAgICAgICAgJGNvbnRlbnQgPSByZWFkRmlsZUNvbnRlbnQoREVERVBBVEguJy8uLi9pbmRleC5waHAnKTsNCiAgICAgICAgaWYoJGNvbnRlbnQpew0KICAgICAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgiL2RhdGEvIiwiL3skbmV3bmFtZX0vIiwkY29udGVudCk7DQogICAgICAgICAgICB3cml0ZUZpbGVDb250ZW50KERFREVQQVRILicvLi4vaW5kZXgucGhwJywkY29udGVudCk7DQogICAgICAgIH0NCiAgICAgICAgJGNvbnRlbnQgPSByZWFkRmlsZUNvbnRlbnQoREVERVBBVEguJy8uLi9tL2luZGV4LnBocCcpOw0KICAgICAgICBpZigkY29udGVudCkgew0KICAgICAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgiL2RhdGEvIiwiL3skbmV3bmFtZX0vIiwkY29udGVudCk7DQogICAgICAgICAgICB3cml0ZUZpbGVDb250ZW50KERFREVQQVRILicvLi4vbS9pbmRleC5waHAnLCRjb250ZW50KTsNCiAgICAgICAgfQ0KICAgICAgICByZXF1aXJlX29uY2UoREVERVBBVEguIi8uLi9pbmNsdWRlL2NvbW1vbi5pbmMucGhwIik7DQogICAgICAgIGVkaXRUcGxDYWNoZSgkbmV3bmFtZSk7DQogICAgICAgIGVjaG8gJ9DeuMRkYXRhw/uzybmmo6EnO2V4aXQoKTsNCiAgICB9DQogICAgZWNobyAn0N64xGRhdGHD+8qnsNyjoSc7DQp9ZWxzZXsNCiAgICBpZighJF9HRVRbJ25ld25hbWUnXSl7DQogICAgICAgIGVjaG8gJ8601ri2qNDCtcTD+7PGo6EnO2V4aXQoKTsNCiAgICB9DQogICAgJG5ld25hbWUgPSAkX0dFVFsnbmV3bmFtZSddOw0KICAgICRyZXN1bHQgPSByZW5hbWUoJy4uL2RlZGUnLCcuLi8nLiRuZXduYW1lKTsNCiAgICBpZigkcmVzdWx0KXsNCiAgICAgICAgZWNobyAnPGgyPtDeuMRkZWRlw/uzybmmo6HH68DOvMfQwrrzzKi12Na3o7o8YSBocmVmPSJodHRwOi8vJy4kX1NFUlZFUlsnSFRUUF9IT1NUJ10uJy8nLiRuZXduYW1lLiciPmh0dHA6Ly8nLiRfU0VSVkVSWydIVFRQX0hPU1QnXS4nLycuJG5ld25hbWUuJzwvYT48L2gyPic7ZXhpdCgpOw0KICAgIH0NCiAgICBlY2hvICfQ3rjEZGVkZcP7yqew3KOhJzsNCn0NCg0KDQpmdW5jdGlvbiBlZGl0VHBsQ2FjaGUoJG5ld25hbWUpDQp7DQogICAgZ2xvYmFsICRkc3FsOw0KICAgICRkc3FsLT5FeGVjdXRlTm9uZVF1ZXJ5KCJ1cGRhdGUgYCNAX19zeXNjb25maWdgIHNldCBgdmFsdWVgID0gJy97JG5ld25hbWV9L3RwbGNhY2hlJyB3aGVyZSB2YXJuYW1lID0gJ2NmZ190cGxjYWNoZV9kaXInIik7DQogICAgUmVXcml0ZUNvbmZpZygpOw0KfQ0KZnVuY3Rpb24gcmVhZEZpbGVDb250ZW50KCRmaWxlUGF0aCkNCnsNCiAgICAkdHh0ID0gJGZpbGVQYXRoOw0KICAgIGlmKCFmaWxlX2V4aXN0cygkdHh0KSkNCiAgICB7DQogICAgICAgICRmcCA9IGZvcGVuKCR0eHQsJ3cnKTsNCiAgICB9ZWxzZSB7DQogICAgICAgICRmcCA9IGZvcGVuKCR0eHQsICdyJyk7DQogICAgfQ0KICAgICRjb250ZW50ID0gZnJlYWQoJGZwLCBmaWxlc2l6ZSgkdHh0KSk7DQogICAgZmNsb3NlKCRmcCk7DQogICAgcmV0dXJuICRjb250ZW50Ow0KfQ0KZnVuY3Rpb24gd3JpdGVGaWxlQ29udGVudCgkZmlsZVBhdGgsJGNvbnRlbnQpDQp7DQogICAgaWYoIWlzX3dyaXRlYWJsZSgkZmlsZVBhdGgpKQ0KICAgIHsNCiAgICAgICAgZWNobyAizsS8/nskZmlsZVBhdGh9srvWp7PW0LTI66Oszt63qNDeuMSjoSI7DQogICAgICAgIGV4aXQoKTsNCiAgICB9DQogICAgJHR4dCA9ICRmaWxlUGF0aDsNCiAgICAkZnAgPSBmb3BlbigkdHh0LCd3Jyk7DQogICAgZndyaXRlKCRmcCwkY29udGVudCk7DQogICAgZmNsb3NlKCRmcCk7DQogICAgcmV0dXJuIHRydWU7DQp9DQpmdW5jdGlvbiBjaGVja1dyaXRlKCkNCnsNCiAgICBpZighaXNfd3JpdGVhYmxlKERFREVQQVRILicvLi4vaW5jbHVkZS9jb21tb24uaW5jLnBocCcpKQ0KICAgIHsNCiAgICAgICAgZWNobyAiL2luY2x1ZGUvY29tbW9uLmluYy5waHAnsrvWp7PW0LTI66Oszt63qNbYw/zD+6OhIjsNCiAgICAgICAgZXhpdCgpOw0KICAgIH0NCn0NCmZ1bmN0aW9uIFJlV3JpdGVDb25maWcoKQ0Kew0KICAgIHJlcXVpcmVfb25jZShERURFUEFUSC4iLy4uL2luY2x1ZGUvY29tbW9uLmluYy5waHAiKTsNCiAgICBnbG9iYWwgJGRzcWw7DQogICAgJGNvbmZpZ2ZpbGUgPSBERURFREFUQS4nL2NvbmZpZy5jYWNoZS5pbmMucGhwJzsNCiAgICBpZighaXNfd3JpdGVhYmxlKCRjb25maWdmaWxlKSkNCiAgICB7DQogICAgICAgIGVjaG8gIsXk1sPOxLz+J3skY29uZmlnZmlsZX0nsrvWp7PW0LTI66Oszt63qNDeuMTPtc2zxeTWw7LOyv2joSI7DQogICAgICAgIGV4aXQoKTsNCiAgICB9DQogICAgJGZwID0gZm9wZW4oJGNvbmZpZ2ZpbGUsJ3cnKTsNCiAgICBmbG9jaygkZnAsMyk7DQogICAgZndyaXRlKCRmcCwiPCIuIj9waHBcclxuIik7DQogICAgJGRzcWwtPlNldFF1ZXJ5KCJTRUxFQ1QgYHZhcm5hbWVgLGB0eXBlYCxgdmFsdWVgLGBncm91cGlkYCBGUk9NIGAjQF9fc3lzY29uZmlnYCBPUkRFUiBCWSBhaWQgQVNDICIpOw0KICAgICRkc3FsLT5FeGVjdXRlKCk7DQogICAgd2hpbGUoJHJvdyA9ICRkc3FsLT5HZXRBcnJheSgpKQ0KICAgIHsNCiAgICAgICAgaWYoJHJvd1sndHlwZSddPT0nbnVtYmVyJykNCiAgICAgICAgew0KICAgICAgICAgICAgaWYoJHJvd1sndmFsdWUnXT09JycpICRyb3dbJ3ZhbHVlJ10gPSAwOw0KICAgICAgICAgICAgZndyaXRlKCRmcCwiXCR7JHJvd1sndmFybmFtZSddfSA9ICIuJHJvd1sndmFsdWUnXS4iO1xyXG4iKTsNCiAgICAgICAgfQ0KICAgICAgICBlbHNlDQogICAgICAgIHsNCiAgICAgICAgICAgIGZ3cml0ZSgkZnAsIlwkeyRyb3dbJ3Zhcm5hbWUnXX0gPSAnIi5zdHJfcmVwbGFjZSgiJyIsJycsJHJvd1sndmFsdWUnXSkuIic7XHJcbiIpOw0KICAgICAgICB9DQogICAgfQ0KICAgIGZ3cml0ZSgkZnAsIj8iLiI+Iik7DQogICAgZmNsb3NlKCRmcCk7DQp9DQo=
</file>
<file type='file' name='../plus/dedesafe.php'>
PD9waHAKaGVhZGVyKCJDb250ZW50LXR5cGU6dGV4dC9odG1sOyBDaGFyc2V0PSd1dGYtOCciKTsKcmVxdWlyZV9vbmNlKGRpcm5hbWUoX19GSUxFX18pLiIvLi4vaW5jbHVkZS9jb21tb24uaW5jLnBocCIpOwokc2FmZSA9IG5ldyBkZWRlc2FmZSgpOwokbXNnID0gYXJyYXkoKTsKJHN0ZXAgPSBpc3NldCgkc3RlcCkgPyBpbnR2YWwoJHN0ZXApIDogMTsKJHN0YXRlPSfmraPlnKjmo4Dmn6XkuK0nOwpzd2l0Y2ggKCRzdGVwKXsKICAgIGNhc2UgMToKICAgICAgICAkc3RhdGU9J+ajgOafpemdmeaAgei1hOa6kOebruW9lemHjOaYr+WQpuacieS4iuS8oHBocOaWh+S7tic7CiAgICAgICAgJG1zZ1snZmF0YWwnXSA9ICRzYWZlLT5jaGVja1N0YXRpY0RpcigpOwogICAgICAgIGJyZWFrOwogICAgY2FzZSAyOgogICAgICAgICRzdGF0ZT0n5qOA5p+laW5zdGFsbOebruW9leaYr+WQpuWIoOmZpCc7CiAgICAgICAgJG1zZ1snZmF0YWwnXSA9ICRzYWZlLT5jaGVja05lZWREZWxldGUoKTsKICAgICAgICBicmVhazsKICAgIGNhc2UgMzoKICAgICAgICAkc3RhdGU9J+ajgOafpeWNsemZqeebruW9leaYr+WQpuaUueWQjSc7CiAgICAgICAgJG1zZ1snZmF0YWwnXSA9ICRzYWZlLT5jaGVja05lZWRSZW5hbWUoKTsKICAgICAgICBicmVhazsKICAgIGNhc2UgNDoKICAgICAgICAkc3RhdGU9J+ajgOafpee9keermeagj+ebruaWh+S7tuWkuemHjOaYr+WQpuacieS4iuS8oHBocOaWh+S7tic7CiAgICAgICAgJG1zZ1snZmF0YWwnXSA9ICRzYWZlLT5jaGVja0h0bWxEaXIoKTsKICAgICAgICBicmVhazsKICAgIGNhc2UgNToKICAgICAgICAkc3RhdGU9J+m7mOiupOeuoeeQhuWRmO+8jOm7mOiupOWvhueggeaYr+WQpuaUueWQjSc7CiAgICAgICAgJG1zZ1snd2FybiddID0gJHNhZmUtPmNoZWNrRGVmYXVsdEFkbWluKCk7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlIDY6CiAgICAgICAgJHN0YXRlPSfmo4Dmn6XpnZnmgIHotYTmupDnm67lvZXmmK/lkKbmnInmiafooYzmnYPpmZAnOwogICAgICAgICRtc2dbJ3dhcm4nXSA9ICRzYWZlLT5jaGVja1Blcm1pc3Npb24oKTsKICAgICAgICBicmVhazsKICAgIGNhc2UgNzoKICAgICAgICAkc3RhdGU9J+WPr+eWkeaWh+S7tuaJq+aPjyc7CiAgICAgICAgJG1zZ1snd2FybiddID0gJHNhZmUtPnNjYW5GaWxlKCk7CiAgICAgICAgYnJlYWs7CiAgICBjYXNlIDg6CiAgICAgICAgJHN0YXRlPSfmiavmj4/lhbbku5bms6jmhI/kuovpobknOwogICAgICAgICRtc2dbJ3N1Z2dlc3QnXSA9ICRzYWZlLT5zdWdnZXN0KCk7CiAgICAgICAgYnJlYWs7Cn0KZnVuY3Rpb24gaGFuZGxlRmlsZVBhdGgoJGZpbGUpCnsKICAgICRmaWxlID0gc3RyX3JlcGxhY2UoJy8vLycsJy8nLCRmaWxlKTsKICAgICRmaWxlID0gc3RyX3JlcGxhY2UoJy8vJywnLycsJGZpbGUpOwogICAgcmV0dXJuICRmaWxlOwp9CgovL+eUn+aIkOeahOaWh+S7tuWkuemHjOaYr+WQpuaciXBocOaWh+S7tgokc2NvcmUgPSAkc2NvcmUgPyBpbnR2YWwoJHNjb3JlKSA6IDEwMDsKJGZhdGFsQ291bnQgPSBjb3VudCgkbXNnWydmYXRhbCddKTsKaWYoJGZhdGFsQ291bnQ+MCl7CiAgICAkc2NvcmUgPSA2MDsKICAgICRzY29yZU5ldyA9ICRzY29yZS0kZmF0YWxDb3VudCo1OwogICAgJHNjb3JlID0gJHNjb3JlTmV3PjAgPyAkc2NvcmVOZXcgOiAwOwp9CiR3YXJuQ291bnQgPSBjb3VudCgkbXNnWyd3YXJuJ10pOwppZigkd2FybkNvdW50PjApewogICAgJHNjb3JlID0gJHNjb3JlPjgwID8gODAgOiAkc2NvcmU7CiAgICAkc2NvcmVOZXcgPSAkc2NvcmUtJHdhcm5Db3VudCoyOwogICAgJHNjb3JlID0gJHNjb3JlTmV3PjAgPyAkc2NvcmVOZXcgOiAwOwp9CiRkYXRhWydncmFkZSddID0gJHNjb3JlIDwgNjAgPyAnRicgOiAnQSc7CiRkYXRhWydzY29yZSddID0gJHNjb3JlOwokZGF0YVsnbXNnJ10gPSAkbXNnOwokZGF0YVsnc3RhdGUnXSA9ICRzdGF0ZTsKJGRhdGFbJ3N0ZXAnXSA9ICRzdGVwOwokZGF0YVsnaXNfZW5kJ10gPSAkc3RlcD49OCA/IHRydWUgOiBmYWxzZTsKZWNobyBqc29uX2VuY29kZSgkZGF0YSk7ZXhpdCgpOwovL+S4u+mhteevoeaUueaPkOmGkgovL+aWh+S7tuevoeaUueaPkOmGkgovL+mdnuazleS4iuS8oOaPkOmGkgovL+aWh+S7tuaMh+e6uemHh+mbhgoKY2xhc3MgZGVkZXNhZmUKewogICAgcHVibGljICR2ZXI9MS4wOwogICAgcHVibGljICRkaXJuYW1lOwogICAgcHJpdmF0ZSAkZHNxbDsKICAgIHByaXZhdGUgJGRvbWFpbjsKICAgIHByaXZhdGUgJHNlcnZlcjsKICAgIHB1YmxpYyBzdGF0aWMgJGZhdGFsQ291bnQgPSAwOwogICAgcHVibGljIHN0YXRpYyAkd2FybkNvdW50ID0gMDsKICAgIHB1YmxpYyBzdGF0aWMgJHN1Z2dlc3RDb3VudCA9IDA7CgogICAgcHVibGljIGZ1bmN0aW9uIF9fY29uc3RydWN0KCkKICAgIHsKICAgICAgICBnbG9iYWwgJGRzcWw7CiAgICAgICAgJHRoaXMtPmRpcm5hbWUgPSBERURFUk9PVDsKICAgICAgICAkdGhpcy0+ZHNxbCA9ICRkc3FsOwogICAgICAgICR0aGlzLT5kb21haW4gPSAkdGhpcy0+Z2V0SHR0cFByb3RvY29sKCkuJzovLycuJF9TRVJWRVJbJ0hUVFBfSE9TVCddOwogICAgICAgICR0aGlzLT5zZXJ2ZXIgPSAkdGhpcy0+Z2V0U2VydmVyTmFtZSgpOwogICAgfQoKCWZ1bmN0aW9uIGdldEh0dHBQcm90b2NvbCgpIHsKCQkkcHJvdG9jb2wgPSAnaHR0cCc7CgkJaWYgKCAhZW1wdHkoJF9TRVJWRVJbJ0hUVFBTJ10pICYmIHN0cnRvbG93ZXIoJF9TRVJWRVJbJ0hUVFBTJ10pICE9PSAnb2ZmJykgewoJCQkkcHJvdG9jb2w9J2h0dHBzJzsKCQl9IGVsc2VpZiAoIGlzc2V0KCRfU0VSVkVSWydIVFRQX1hfRk9SV0FSREVEX1BST1RPJ10pICYmICRfU0VSVkVSWydIVFRQX1hfRk9SV0FSREVEX1BST1RPJ10gPT09ICdodHRwcycgKSB7CgkJCSRwcm90b2NvbD0naHR0cHMnOwoJCX0gZWxzZWlmICggIWVtcHR5KCRfU0VSVkVSWydIVFRQX0ZST05UX0VORF9IVFRQUyddKSAmJiBzdHJ0b2xvd2VyKCRfU0VSVkVSWydIVFRQX0ZST05UX0VORF9IVFRQUyddKSAhPT0gJ29mZicpIHsKCQkJJHByb3RvY29sPSdodHRwcyc7CgkJfQoJCXJldHVybiAkcHJvdG9jb2w7Cgl9CgogICAgZnVuY3Rpb24gZ2V0U2VydmVyTmFtZSgpCiAgICB7CiAgICAgICAgJHNlcnZlciA9IHN0cnRvbG93ZXIoJF9TRVJWRVJbIlNFUlZFUl9TT0ZUV0FSRSJdKTsKICAgICAgICBpZihzdHJzdHIoJHNlcnZlciwnYXBhY2hlJykhPT1mYWxzZSl7CiAgICAgICAgICAgIHJldHVybiAnYXBhY2hlJzsKICAgICAgICB9CiAgICAgICAgaWYoc3Ryc3RyKCRzZXJ2ZXIsJ2lpcycpIT09ZmFsc2UpewogICAgICAgICAgICByZXR1cm4gJ2lpcyc7CiAgICAgICAgfQogICAgICAgIGlmKHN0cnN0cigkc2VydmVyLCduZ2lueCcpIT09ZmFsc2UpewogICAgICAgICAgICByZXR1cm4gJ25naW54JzsKICAgICAgICB9CiAgICAgICAgcmV0dXJuICd1bmtub3duJzsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gY2hlY2tTdGF0aWNEaXIoKQogICAgewogICAgICAgICRwaHBEaXJzID0gYXJyYXkoJ3VwbG9hZHMnLCdhJywndGVtcGxldHMnLCdza2luJywnaHRtbCcsJ2ltYWdlcycsJ2pzJyk7CiAgICAgICAgJG1zZyA9IGFycmF5KCk7CiAgICAgICAgZm9yZWFjaCAoJHBocERpcnMgYXMgJHBocERpcil7CiAgICAgICAgICAgICRmb2xkZXIgPSAkdGhpcy0+ZGlybmFtZS4nLycuJHBocERpcjsKCiAgICAgICAgICAgIGlmKCFpc19kaXIoJGZvbGRlcikpIGNvbnRpbnVlOwogICAgICAgICAgICAkb2JqID0gbmV3IFVuc2V0Qm9tKGFycmF5KCdwaHAnKSk7CiAgICAgICAgICAgICRvYmotPnByb2Nlc3MoJGZvbGRlcik7CiAgICAgICAgICAgIGZvcmVhY2ggKCRvYmotPmZpbGVzIGFzICRmaWxlKXsKICAgICAgICAgICAgICAgICRmaWxlID0gaGFuZGxlRmlsZVBhdGgoJGZpbGUpOwogICAgICAgICAgICAgICAgJGRpciA9IHN0cl9yZXBsYWNlKCR0aGlzLT5kaXJuYW1lLCcnLGRpcm5hbWUoJGZpbGUpKTsKICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICRtc2dbXSA9ICI8cD57JHBocERpcn3nm67lvZXlh7rnjrBwaHDmlofku7bvvJp7JGZpbGV9ICA8YSBjbGFzcz0nYnRuIGJ0bi1saW5rJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZmlsZV9tYW5hZ2Vfdmlldy5waHA/Zm1kbz1lZGl0JmZpbGVuYW1lPXskZmlsZW5hbWV9JmFjdGl2ZXBhdGg9eyRkaXJ9Jz7mn6XnnIvmlofku7Y8L2E+PC9wPiI7CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICRtc2c7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNoZWNrTmVlZERlbGV0ZSgpCiAgICB7CiAgICAgICAgJG1zZyA9IGFycmF5KCk7CiAgICAgICAgaWYoaXNfZGlyKCR0aGlzLT5kaXJuYW1lLicvaW5zdGFsbCcpKXsKICAgICAgICAgICAgJG1zZ1tdID0gIjxwPmluc3RhbGzmlofku7blpLnmnKrliKDpmaQgIDxhIGNsYXNzPSdidG4gYnRuLWxpbmsgdGV4dC1kYW5nZXInIHRhcmdldD0nX2JsYW5rJyBocmVmPSdkZWRlc2FmZS5waHA/YWN0aW9uPWRlbGRpciZkaXI9aW5zdGFsbCc+5Yig6Zmk6K+l5paH5Lu25aS5PC9hPjwvcD4iOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJG1zZzsKICAgIH0KCgogICAgcHVibGljIGZ1bmN0aW9uIGNoZWNrTmVlZFJlbmFtZSgpCiAgICB7CiAgICAgICAgJGRpcnMgPSBhcnJheSgnZGF0YScsJ2RlZGUnKTsKICAgICAgICAkbXNnID0gYXJyYXkoKTsKICAgICAgICBmb3JlYWNoICgkZGlycyBhcyAkZGlyKXsKICAgICAgICAgICAgaWYoJGRpcj09J2RhdGEnKXsKICAgICAgICAgICAgICAgIGlmKHN1YnN0cihERURFREFUQSwtNCk9PSdkYXRhJyl7CiAgICAgICAgICAgICAgICAgICAgaWYoc3Ryc3RyKERFREVEQVRBLCcuLi9kYXRhJyk9PT1mYWxzZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRtc2dbXSA9ICI8cD5kYXRh55uu5b2V5pyq5pS55ZCN77yBIDxhIGNsYXNzPSdidG4gYnRuLWxpbmsnIHRhcmdldD0nX2JsYW5rJyBocmVmPSdkZWRlc2FmZS5waHA/YWN0aW9uPWVkaXRkYXRhJz7jgJDluK7miJHmlLnjgJE8L2E+PC9wPiI7CiAgICAgICAgICAgICAgICAgICAgfQogICAgICAgICAgICAgICAgfQogICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgIGlmKGlzX2RpcigkdGhpcy0+ZGlybmFtZS4nLycuJGRpcikpewogICAgICAgICAgICAgICAgICAgICRtc2dbXSA9ICc8cD7pu5jorqTnrqHnkIbnm67lvZXkuLpkZWRl77yM6ZyA6KaB56uL5Y2z5pS55ZCN77yBIDxhIGNsYXNzPVwnYnRuIGJ0bi1saW5rXCcgdGFyZ2V0PVwnX2JsYW5rXCcgaHJlZj1cJ2RlZGVzYWZlLnBocD9hY3Rpb249ZWRpdGRlZGVcJz7jgJDluK7miJHmlLnjgJE8L2E+PC9wPic7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICB9CiAgICAgICAgcmV0dXJuICRtc2c7CiAgICB9CgogICAgcHVibGljIGZ1bmN0aW9uIGNoZWNrSHRtbERpcigpCiAgICB7CiAgICAgICAgZ2xvYmFsICRjZmdfY21zcGF0aDsKICAgICAgICAkbXNnID0gYXJyYXkoKTsKICAgICAgICAkdGhpcy0+ZHNxbC0+U2V0UXVlcnkoIlNFTEVDVCB0eXBlZGlyIEZST00gYCNAX19hcmN0eXBlYCIpOwogICAgICAgICR0aGlzLT5kc3FsLT5FeGVjdXRlKCk7CiAgICAgICAgJG1ha2VEaXJzID0gYXJyYXkoKTsKICAgICAgICB3aGlsZSgkYXJyID0gJHRoaXMtPmRzcWwtPkdldEFycmF5KCkpCiAgICAgICAgewogICAgICAgICAgICBpZihzdHJzdHIoJGFyclsndHlwZWRpciddLCcvYS8nKSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICB9CiAgICAgICAgICAgICRkaXIgPSBzdHJfcmVwbGFjZSgne2Ntc3BhdGh9JywnJywkYXJyWyd0eXBlZGlyJ10pOwogICAgICAgICAgICAkZGlyID0gKGRpcm5hbWUoJGRpcik9PSdcXCcpID8gJGRpciA6IGRpcm5hbWUoJGRpcik7CiAgICAgICAgICAgICRtYWtlRGlyc1tdID0gJGNmZ19jbXNwYXRoLiRkaXI7CiAgICAgICAgfQogICAgICAgICRtYWtlRGlycyA9IGFycmF5X3VuaXF1ZSgkbWFrZURpcnMpOwogICAgICAgIGZvcmVhY2ggKCRtYWtlRGlycyBhcyAkcGhwRGlyKXsKICAgICAgICAgICAgaWYoJHBocERpcj09Jy8nKSBjb250aW51ZTsKICAgICAgICAgICAgJGZvbGRlciA9ICR0aGlzLT5kaXJuYW1lLicvJy4kcGhwRGlyOwogICAgICAgICAgICBpZighaXNfZGlyKCRmb2xkZXIpKSBjb250aW51ZTsKICAgICAgICAgICAgJG9iaiA9IG5ldyBVbnNldEJvbShhcnJheSgncGhwJykpOwogICAgICAgICAgICAkb2JqLT5wcm9jZXNzKCRmb2xkZXIpOwogICAgICAgICAgICBmb3JlYWNoICgkb2JqLT5maWxlcyBhcyAkZmlsZSl7CiAgICAgICAgICAgICAgICAkZmlsZSA9IGhhbmRsZUZpbGVQYXRoKCRmaWxlKTsKICAgICAgICAgICAgICAgICRkaXIgPSBzdHJfcmVwbGFjZSgkdGhpcy0+ZGlybmFtZSwnJyxkaXJuYW1lKCRmaWxlKSk7CiAgICAgICAgICAgICAgICAkZmlsZW5hbWUgPSBiYXNlbmFtZSgkZmlsZSk7CiAgICAgICAgICAgICAgICAkbXNnW10gPSAiPHA+eyRwaHBEaXJ955uu5b2V5Ye6546wcGhw5paH5Lu277yaeyRmaWxlfSAgPGEgY2xhc3M9J2J0biBidG4tbGluaycgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2ZpbGVfbWFuYWdlX3ZpZXcucGhwP2ZtZG89ZWRpdCZmaWxlbmFtZT17JGZpbGVuYW1lfSZhY3RpdmVwYXRoPXskZGlyfSc+5p+l55yL5paH5Lu2PC9hPjwvcD4iOwogICAgICAgICAgICB9CiAgICAgICAgfQogICAgICAgIHJldHVybiAkbXNnOwogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBjaGVja0RlZmF1bHRBZG1pbigpCiAgICB7CiAgICAgICAgJG1zZyA9IGFycmF5KCk7CiAgICAgICAgJHJvdyA9ICR0aGlzLT5kc3FsLT5HZXRPbmUoIlNFTEVDVCAqIEZST00gYCNAX19hZG1pbmAgV0hFUkUgdXNlcmlkPSdhZG1pbiciKTsKICAgICAgICBpZihpc19hcnJheSgkcm93KSl7CiAgICAgICAgICAgICRtc2dbXSA9ICc8cD7pu5jorqTnrqHnkIblkZjotKblj7fkuLphZG1pbu+8jDxhIGhyZWY9InN5c19hZG1pbl91c2VyLnBocCI+6K+35pu05pS5PC9hPuOAgjwvcD4nOwogICAgICAgIH0KICAgICAgICByZXR1cm4gJG1zZzsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gY2hlY2tQZXJtaXNzaW9uKCkKICAgIHsKICAgICAgICAkcGhwRGlycyA9IGFycmF5KCdpbmNsdWRlJywndXBsb2FkcycsJ2EnLCd0ZW1wbGV0cycsJ3NraW4nLCdodG1sJywnaW1hZ2VzJywnanMnKTsKICAgICAgICAkbXNnID0gYXJyYXkoKTsJCQogICAgICAgIGZvcmVhY2ggKCRwaHBEaXJzIGFzICRwaHBEaXIpewogICAgICAgICAgICAkZm9sZGVyID0gJHRoaXMtPmRpcm5hbWUuJy8nLiRwaHBEaXI7CgkJCQogICAgICAgICAgICBpZighaXNfZGlyKCRmb2xkZXIpKSBjb250aW51ZTsKCQkJCiAgICAgICAgICAgIGlmKCFmaWxlX2V4aXN0cygkZm9sZGVyLicvY2hlY2sucGhwJykpewogICAgICAgICAgICAgICAgJHJlc3VsdCA9IGZpbGVfcHV0X2NvbnRlbnRzKCRmb2xkZXIuJy9jaGVjay5waHAnLCc8P3BocCBlY2hvIDE7Pz4nKTsJCQkJCiAgICAgICAgICAgICAgICBpZigkcmVzdWx0IT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nLycuJHBocERpci4nL2NoZWNrLnBocCcpOwogICAgICAgICAgICAgICAgICAgIGlmKHN0cnN0cigkaGVhZGVyWzBdLCcyMDAnKSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAgICAgJG1zZ1tdID0gIjxwPnskZm9sZGVyfeebruW9leacieaJp+ihjOiEmuacrOeahOadg+mZkOOAgiIuJHRoaXMtPmdldFNvbHZlQnV0dG9uKCRmb2xkZXIpLiI8L3A+IjsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgkJCQkKICAgICAgICAgICAgICAgIHVubGluaygkZm9sZGVyLicvY2hlY2sucGhwJyk7CiAgICAgICAgICAgIH1lbHNlewogICAgICAgICAgICAgICAgdW5saW5rKCRmb2xkZXIuJy9jaGVjay5waHAnKTsKICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gJG1zZzsKICAgIH0KCiAgICBmdW5jdGlvbiBpc1Jld3JpdGVNb2QoKQogICAgewoJCXJldHVybiB0cnVlOwogICAgICAgIGlmIChmdW5jdGlvbl9leGlzdHMoJ2FwYWNoZV9nZXRfbW9kdWxlcycpKQogICAgICAgIHsKICAgICAgICAgICAgJGFNb2RzID0gYXBhY2hlX2dldF9tb2R1bGVzKCk7CiAgICAgICAgICAgICRiSXNSZXdyaXRlID0gaW5fYXJyYXkoJ21vZF9yZXdyaXRlJywgJGFNb2RzKTsKICAgICAgICB9CiAgICAgICAgZWxzZQogICAgICAgIHsKICAgICAgICAgICAgJGJJc1Jld3JpdGUgPSAoc3RydG9sb3dlcihnZXRlbnYoJ0hUVFBfTU9EX1JFV1JJVEUnKSkgPT0gJ29uJyk7CiAgICAgICAgfQogICAgICAgIHJldHVybiAkYklzUmV3cml0ZTsKICAgIH0KCiAgICBwcml2YXRlIGZ1bmN0aW9uIGdldFNvbHZlQnV0dG9uKCRmb2xkZXIpCiAgICB7CiAgICAgICAgc3dpdGNoICgkdGhpcy0+c2VydmVyKXsKICAgICAgICAgICAgY2FzZSAnYXBhY2hlJzoKICAgICAgICAgICAgICAgIGlmKCR0aGlzLT5pc1Jld3JpdGVNb2QoKSl7CiAgICAgICAgICAgICAgICAgICAgcmV0dXJuICLjgJA8YSB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZGVkZXNhZmUucGhwP2FjdGlvbj1jbG9zZVBlcm1pc3Npb24mZm9sZGVyPXskZm9sZGVyfSc+5biu5oiR5YWz5o6JPC9hPuOAkSI7CiAgICAgICAgICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgICAgICAgICByZXR1cm4gJ+OAkGFwYWNoZeacquW8gOWQr21vZF9yZXdyaXRl5qih5Z2X44CRJzsKICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgIGJyZWFrOwogICAgICAgICAgICBjYXNlICduZ2lueCc6CiAgICAgICAgICAgICAgICByZXR1cm4gJ+OAkDxhIGhyZWY9XCdodHRwOi8vd3d3LmpiNTEubmV0L2FydGljbGUvNDYxNTMuaHRtXCc+5p+l55yL5YWz6Zet5pa55rOVPC9hPuOAkSc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICAgICAgY2FzZSAnaWlzJzoKICAgICAgICAgICAgICAgIHJldHVybiAn44CQPGEgaHJlZj1cJ2h0dHA6Ly93d3cucGM4MTEuY29tLzYvMS8yNjA4MC5odG1sXCc+5p+l55yL5YWz6Zet5pa55rOVPC9hPuOAkSc7CiAgICAgICAgICAgICAgICBicmVhazsKICAgICAgICB9CgogICAgfQoKICAgIHB1YmxpYyBmdW5jdGlvbiBzY2FuRmlsZSgpCiAgICB7CiAgICAgICAgJG1zZyA9IGFycmF5KCk7CiAgICAgICAgJG9iaiA9IG5ldyBVbnNldEJvbShhcnJheSgncGhwJykpOwogICAgICAgICRvYmotPnByb2Nlc3MoJHRoaXMtPmRpcm5hbWUpOwoJCSRpPTA7CiAgICAgICAgZm9yZWFjaCAoJG9iai0+ZmlsZXMgYXMgJGZpbGUpewoJCQkkaSsrOwogICAgICAgICAgICAkZmlsZSA9IGhhbmRsZUZpbGVQYXRoKCRmaWxlKTsKICAgICAgICAgICAgaWYoaXNfZmlsZSgkZmlsZSkpewogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBmaWxlX2dldF9jb250ZW50cygkZmlsZSk7CgkJCQlpZihzdHJzdHIoJGNvbnRlbnQsJzw/cGhwJyk9PT1mYWxzZSl7CgkJCQkJIGNvbnRpbnVlOwoJCQkJfQogICAgICAgICAgICAgICAgaWYoc3Ryc3RyKCRjb250ZW50LCdnJy4nemluZmxhdGUnKSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgICAgICAkZGlyID0gc3RyX3JlcGxhY2UoJHRoaXMtPmRpcm5hbWUsJycsZGlybmFtZSgkZmlsZSkpOwogICAgICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICAgICAkbXNnW10gPSAiPHA+5Y+R546w5Y+v55aR5paH5Lu277yaeyRmaWxlfSA8YSBjbGFzcz0nYnRuIGJ0bi1saW5rJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZmlsZV9tYW5hZ2Vfdmlldy5waHA/Zm1kbz1lZGl0JmZpbGVuYW1lPXskZmlsZW5hbWV9JmFjdGl2ZXBhdGg9eyRkaXJ9Jz7mn6XnnIvmlofku7Y8L2E+PC9wPiI7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CgkJCQkvKgogICAgICAgICAgICAgICAgaWYoJHRoaXMtPmdldENvdW50T2ZTdHIoJGNvbnRlbnQpPjEwMCl7CiAgICAgICAgICAgICAgICAgICAgJGRpciA9IHN0cl9yZXBsYWNlKCR0aGlzLT5kaXJuYW1lLCcnLGRpcm5hbWUoJGZpbGUpKTsKICAgICAgICAgICAgICAgICAgICAkZmlsZW5hbWUgPSBiYXNlbmFtZSgkZmlsZSk7CiAgICAgICAgICAgICAgICAgICAgJG1zZ1tdID0gIjxwPuWPkeeOsOWPr+eWkeaWh+S7tu+8mnskZmlsZX0gPGEgY2xhc3M9J2J0biBidG4tbGluaycgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2ZpbGVfbWFuYWdlX3ZpZXcucGhwP2ZtZG89ZWRpdCZmaWxlbmFtZT17JGZpbGVuYW1lfSZhY3RpdmVwYXRoPXskZGlyfSc+5p+l55yL5paH5Lu2PC9hPjwvcD4iOwogICAgICAgICAgICAgICAgICAgIGNvbnRpbnVlOwogICAgICAgICAgICAgICAgfQoJCQkJKi8KCiAgICAgICAgICAgICAgICBpZihzdHJzdHIoJGNvbnRlbnQsJ2MnLidyZWF0ZV9mdW5jdGlvbicpIT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICRkaXIgPSBzdHJfcmVwbGFjZSgkdGhpcy0+ZGlybmFtZSwnJyxkaXJuYW1lKCRmaWxlKSk7CiAgICAgICAgICAgICAgICAgICAgJGZpbGVuYW1lID0gYmFzZW5hbWUoJGZpbGUpOwogICAgICAgICAgICAgICAgICAgICRtc2dbXSA9ICI8cD7lj5HnjrDlj6/nlpHmlofku7bvvJp7JGZpbGV9IDxhIGNsYXNzPSdidG4gYnRuLWxpbmsnIHRhcmdldD0nX2JsYW5rJyBocmVmPSdmaWxlX21hbmFnZV92aWV3LnBocD9mbWRvPWVkaXQmZmlsZW5hbWU9eyRmaWxlbmFtZX0mYWN0aXZlcGF0aD17JGRpcn0nPuafpeeci+aWh+S7tjwvYT48L3A+IjsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCgkJCQkkbGluZSA9IGNvdW50KGZpbGUoJGZpbGUpKTsKCQkJCWlmKCRsaW5lPD01ICYmIGZpbGVzaXplKCRmaWxlKT4xNTAwKXsKICAgICAgICAgICAgICAgICAgICAkZGlyID0gc3RyX3JlcGxhY2UoJHRoaXMtPmRpcm5hbWUsJycsZGlybmFtZSgkZmlsZSkpOwogICAgICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICAgICAkbXNnW10gPSAiPHA+5Y+R546w5Y+v55aR5paH5Lu277yaeyRmaWxlfSA8YSBjbGFzcz0nYnRuIGJ0bi1saW5rJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZmlsZV9tYW5hZ2Vfdmlldy5waHA/Zm1kbz1lZGl0JmZpbGVuYW1lPXskZmlsZW5hbWV9JmFjdGl2ZXBhdGg9eyRkaXJ9Jz7mn6XnnIvmlofku7Y8L2E+PC9wPiI7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgkJCQl9CgkJCQlpZigkbGluZTw9MTAgJiYgZmlsZXNpemUoJGZpbGUpPjEwMDAwKXsKICAgICAgICAgICAgICAgICAgICAkZGlyID0gc3RyX3JlcGxhY2UoJHRoaXMtPmRpcm5hbWUsJycsZGlybmFtZSgkZmlsZSkpOwogICAgICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICAgICAkbXNnW10gPSAiPHA+5Y+R546w5Y+v55aR5paH5Lu277yaeyRmaWxlfSA8YSBjbGFzcz0nYnRuIGJ0bi1saW5rJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZmlsZV9tYW5hZ2Vfdmlldy5waHA/Zm1kbz1lZGl0JmZpbGVuYW1lPXskZmlsZW5hbWV9JmFjdGl2ZXBhdGg9eyRkaXJ9Jz7mn6XnnIvmlofku7Y8L2E+PC9wPiI7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CgkJCQl9CgogICAgICAgICAgICAgICAgJHBhdHRlcm4gPSAnL1thLXpBLVpcZFxuXHJcL117MjAwLH0vaXNVJzsKICAgICAgICAgICAgICAgICRyZXN1bHQgPSBwcmVnX21hdGNoX2FsbCgkcGF0dGVybiwkY29udGVudCwkbWF0Y2hlcyk7CiAgICAgICAgICAgICAgICBpZigkcmVzdWx0PjApewogICAgICAgICAgICAgICAgICAgICRkaXIgPSBzdHJfcmVwbGFjZSgkdGhpcy0+ZGlybmFtZSwnJyxkaXJuYW1lKCRmaWxlKSk7CiAgICAgICAgICAgICAgICAgICAgJGZpbGVuYW1lID0gYmFzZW5hbWUoJGZpbGUpOwogICAgICAgICAgICAgICAgICAgICRtc2dbXSA9ICI8cD7lj5HnjrDlj6/nlpHmlofku7bvvJp7JGZpbGV9IDxhIGNsYXNzPSdidG4gYnRuLWxpbmsnIHRhcmdldD0nX2JsYW5rJyBocmVmPSdmaWxlX21hbmFnZV92aWV3LnBocD9mbWRvPWVkaXQmZmlsZW5hbWU9eyRmaWxlbmFtZX0mYWN0aXZlcGF0aD17JGRpcn0nPuafpeeci+aWh+S7tjwvYT48L3A+IjsKICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgIH0KCgogICAgICAgICAgICAgICAgJHBhdHRlcm4gPSAnL1wkW2EtekEtWjAtOVxfXStcKC9VJzsKICAgICAgICAgICAgICAgICRjb250ZW50ID0gc3RyX3JlcGxhY2UoJy0+JCcsJz0nLCRjb250ZW50KTsKICAgICAgICAgICAgICAgICRjb250ZW50ID0gc3RyX3JlcGxhY2UoJ1wkJywnPScsJGNvbnRlbnQpOwogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgnbmV3ICQnLCduZXcgJywkY29udGVudCk7CiAgICAgICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCckZnVuYycsJycsJGNvbnRlbnQpOwogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgnJGJ1Y2tldCcsJycsJGNvbnRlbnQpOwogICAgICAgICAgICAgICAgJGNvbnRlbnQgPSBzdHJfcmVwbGFjZSgnZnVuYygnLCc9JywkY29udGVudCk7CiAgICAgICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCckayh7JHZ9JywnJywkY29udGVudCk7CiAgICAgICAgICAgICAgICAkY29udGVudCA9IHN0cl9yZXBsYWNlKCckdHlwZW5hbWUoJywnJywkY29udGVudCk7CiAgICAgICAgICAgICAgICAkcmVzdWx0ID0gcHJlZ19tYXRjaF9hbGwoJHBhdHRlcm4sJGNvbnRlbnQsJG1hdGNoZXMpOwogICAgICAgICAgICAgICAgaWYoJHJlc3VsdD4wKXsKICAgICAgICAgICAgICAgICAgICAkZGlyID0gc3RyX3JlcGxhY2UoJHRoaXMtPmRpcm5hbWUsJycsZGlybmFtZSgkZmlsZSkpOwogICAgICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICAgICAkbXNnW10gPSAiPHA+5Y+R546w5Y+v55aR5paH5Lu277yaeyRmaWxlfSA8YSBjbGFzcz0nYnRuIGJ0bi1saW5rJyB0YXJnZXQ9J19ibGFuaycgaHJlZj0nZmlsZV9tYW5hZ2Vfdmlldy5waHA/Zm1kbz1lZGl0JmZpbGVuYW1lPXskZmlsZW5hbWV9JmFjdGl2ZXBhdGg9eyRkaXJ9Jz7mn6XnnIvmlofku7Y8L2E+PC9wPiI7CiAgICAgICAgICAgICAgICAgICAgY29udGludWU7CiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICBpZihzdHJpc3RyKCRmaWxlLCdjYWNoZScpPT09ZmFsc2UpewogICAgICAgICAgICAgICAgICAgICRsaW5lID0gY291bnQoZmlsZSgkZmlsZSkpOwogICAgICAgICAgICAgICAgICAgIGlmKCRsaW5lPD0yICYmIHN0cnN0cigkY29udGVudCwnR0VUJykhPT1mYWxzZSl7CiAgICAgICAgICAgICAgICAgICAgICAgICRkaXIgPSBzdHJfcmVwbGFjZSgkdGhpcy0+ZGlybmFtZSwnJyxkaXJuYW1lKCRmaWxlKSk7CiAgICAgICAgICAgICAgICAgICAgICAgICRmaWxlbmFtZSA9IGJhc2VuYW1lKCRmaWxlKTsKICAgICAgICAgICAgICAgICAgICAgICAgJG1zZ1tdID0gIjxwPuWPkeeOsOWPr+eWkeaWh+S7tu+8mnskZmlsZX0gPGEgY2xhc3M9J2J0biBidG4tbGluaycgdGFyZ2V0PSdfYmxhbmsnIGhyZWY9J2ZpbGVfbWFuYWdlX3ZpZXcucGhwP2ZtZG89ZWRpdCZmaWxlbmFtZT17JGZpbGVuYW1lfSZhY3RpdmVwYXRoPXskZGlyfSc+5p+l55yL5paH5Lu2PC9hPjwvcD4iOwogICAgICAgICAgICAgICAgICAgICAgICBjb250aW51ZTsKICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICB9CgovLyAgICAgICAgICAgICAgICAkc2l6ZSA9IGZpbGVzaXplKCRmaWxlKTsKLy8gICAgICAgICAgICAgICAgJHNpemUgPSAkdGhpcy0+Z2V0c2l6ZSgkc2l6ZSwna2InKTsKLy8gICAgICAgICAgICAgICAgaWYoJHNpemU+NTApewovLyAgICAgICAgICAgICAgICAgICAgJG1zZ1tdID0gIjxwPuWPkeeOsOWPr+eWkeaWh+S7tizkvZPnp6/lpKfkuo41MEtC77yaeyRmaWxlfTwvcD4iOwovLyAgICAgICAgICAgICAgICAgICAgY29udGludWU7Ci8vICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgfQogICAgICAgIH0KICAgICAgICByZXR1cm4gJG1zZzsKICAgIH0KCiAgICBmdW5jdGlvbiBnZXRDb3VudE9mU3RyKCR0ZXh0LCRpc2RlYnVnPTApCiAgICB7CiAgICAgICAgJHdvcmRzID0gYXJyYXkoKTsKICAgICAgICAkdGV4dCA9IHN0cl9yZXBsYWNlKCJcclxuIiwiIiwkdGV4dCk7CiAgICAgICAgJHRleHQgPSBzdHJfcmVwbGFjZSgiXG5cciIsIiIsJHRleHQpOwogICAgICAgICR0ZXh0ID0gc3RyX3JlcGxhY2UoIiAiLCIiLCR0ZXh0KTsKICAgICAgICAkdGV4dCA9IHN0cl9yZXBsYWNlKCIqIiwiIiwkdGV4dCk7CiAgICAgICAgLy/mjInnibnmrornrKblj7fov5vooYzliIblj6UKICAgICAgICAkc3RyaW5nID0gcHJlZ19yZXBsYWNlKCcvKFtceHs0ZTAwfS1ceHs5ZmE1fVx3XC1dfC0pKy9pdScsICctJywgJHRleHQpOwogICAgICAgICRzdHJpbmcgPSB0cmltKCRzdHJpbmcsJy0nKTsKICAgICAgICAkc2VnTGlzdCA9IGV4cGxvZGUoJy0nLCRzdHJpbmcpOwogICAgICAgIGZvcmVhY2goJHNlZ0xpc3QgYXMgJHYpewogICAgICAgICAgICAkd29yZHNbc3RybGVuKCR2KV0gPSAkdjsKICAgICAgICB9CiAgICAgICAga3NvcnQoJHdvcmRzKTsKICAgICAgICAkc3RyID0gYXJyYXlfcG9wKCR3b3Jkcyk7CiAgICAgICAgcmV0dXJuIHN0cmxlbigkc3RyKTsKICAgIH0KCiAgICBwdWJsaWMgZnVuY3Rpb24gc3VnZ2VzdCgpCiAgICB7CiAgICAgICAgJGNvbnRlbnQgPSBmaWxlX2dldF9jb250ZW50cygkdGhpcy0+ZG9tYWluKTsKICAgICAgICAkbXNnID0gYXJyYXkoKTsKICAgICAgICBpZighJHRoaXMtPmlzSHR0cHMoKSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD7lu7rorq7kvb/nlKhIVFRQU+WNj+iuru+8jOWwhuabtOWKoOWuieWFqOOAgjwvcD4iOwogICAgICAgIH0KICAgICAgICBpZihzdHJpc3RyKCRjb250ZW50LCdkZWRlY21zJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD7pppbpobXlh7rnjrDnu4fmoqbnibnlvoHvvJpkZWRlY21z77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQoKICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9tZW1iZXIvJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+5aaC5p6c5rKh5pyJ55So5Yiw5Lya5ZGY6YOo5YiG77yM5bu66K6u5Yig6ZmkbWVtYmVy5paH5Lu25aS5PC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3NwZWNpYWwvJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+5aaC5p6c5rKh5pyJ55So5Yiw5LiT6aKY77yM5bu66K6u5Yig6Zmkc3BlY2lhbOaWh+S7tuWkuTwvcD4iOwogICAgICAgIH0KICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9wbHVzL2d1ZXN0Ym9vay5waHAnKTsKICAgICAgICBpZihzdHJzdHIoJGhlYWRlclswXSwnMjAwJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD7lvLrng4jlu7rorq7liKDpmaQvcGx1cy9ndWVzdGJvb2sucGhw5paH5Lu25Y+KL3BsdXMvZ3Vlc3Rib29r5paH5Lu25aS5PC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvYWR2YW5jZWRzZWFyY2gucGhwJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+L3BsdXMvYWR2YW5jZWRzZWFyY2gucGhw77yI6auY57qn5pCc57Si77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvYXJjbXVsdGkucGhwJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+L3BsdXMvYXJjbXVsdGkucGhw77yI5byC5q2l5pa55byP6LCD55So5oyH5a6a55qEdGFn5YiX6KGo77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvYm9va2ZlZWRiYWNrLnBocCcpOwogICAgICAgIGlmKHN0cnN0cigkaGVhZGVyWzBdLCcyMDAnKSE9PWZhbHNlKXsKICAgICAgICAgICAgJG1zZ1tdID0gIjxwPi9wbHVzL2Jvb2tmZWVkYmFjay5waHDvvIjlm77kuabor4TorrrvvInvvIzlu7rorq7liKDpmaQ8L3A+IjsKICAgICAgICB9CiAgICAgICAgJGhlYWRlcj1nZXRfaGVhZGVycygkdGhpcy0+ZG9tYWluLicvcGx1cy9ib29rZmVlZGJhY2tfanMucGhwJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+L3BsdXMvYm9va2ZlZWRiYWNrX2pzLnBocO+8iOWbvuS5puivhOiuuuiwg+eUqOaWh+S7tu+8ie+8jOW7uuiuruWIoOmZpDwvcD4iOwogICAgICAgIH0KICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9wbHVzL2ZsaW5rLnBocCcpOwogICAgICAgIGlmKHN0cnN0cigkaGVhZGVyWzBdLCcyMDAnKSE9PWZhbHNlKXsKICAgICAgICAgICAgJG1zZ1tdID0gIjxwPi9wbHVzL2ZsaW5rLnBocO+8iOWPi+aDhemTvuaOpe+8ie+8jOW7uuiuruWIoOmZpDwvcD4iOwogICAgICAgIH0KICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9wbHVzL2ZsaW5rX2FkZC5waHAnKTsKICAgICAgICBpZihzdHJzdHIoJGhlYWRlclswXSwnMjAwJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD4vcGx1cy9mbGlua19hZGQucGhw77yI5Y+L5oOF6ZO+5o6l77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvaGVpZ2h0c2VhcmNoLnBocCcpOwogICAgICAgIGlmKHN0cnN0cigkaGVhZGVyWzBdLCcyMDAnKSE9PWZhbHNlKXsKICAgICAgICAgICAgJG1zZ1tdID0gIjxwPi9wbHVzL2hlaWdodHNlYXJjaC5waHDvvIjpq5jnuqfmkJzntKLvvInvvIzlu7rorq7liKDpmaQ8L3A+IjsKICAgICAgICB9CiAgICAgICAgJGhlYWRlcj1nZXRfaGVhZGVycygkdGhpcy0+ZG9tYWluLicvcGx1cy9yZWNvbW1lbmQucGhwJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+L3BsdXMvcmVjb21tZW5kLnBocO+8iOS/oeaBr+aOqOiNkO+8ie+8jOW7uuiuruWIoOmZpDwvcD4iOwogICAgICAgIH0KICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9wbHVzL3Nob3dwaG90by5waHAnKTsKICAgICAgICBpZihzdHJzdHIoJGhlYWRlclswXSwnMjAwJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD4vcGx1cy9zaG93cGhvdG8ucGhw77yI5pi+56S65Zu+54mH77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvc3Rvdy5waHAnKTsKICAgICAgICBpZihzdHJzdHIoJGhlYWRlclswXSwnMjAwJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD4vcGx1cy9zaG93cGhvdG8ucGhw77yI5pS26JeP5paH56ug77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQogICAgICAgICRoZWFkZXI9Z2V0X2hlYWRlcnMoJHRoaXMtPmRvbWFpbi4nL3BsdXMvdGFzay5waHAnKTsKICAgICAgICBpZihzdHJzdHIoJGhlYWRlclswXSwnMjAwJykhPT1mYWxzZSl7CiAgICAgICAgICAgICRtc2dbXSA9ICI8cD4vcGx1cy90YXNrLnBocO+8iOiuoeWIkuS7u+WKoe+8ie+8jOW7uuiuruWIoOmZpDwvcD4iOwogICAgICAgIH0KICAgICAgICAkaGVhZGVyPWdldF9oZWFkZXJzKCR0aGlzLT5kb21haW4uJy9wbHVzL3ZvdGUucGhwJyk7CiAgICAgICAgaWYoc3Ryc3RyKCRoZWFkZXJbMF0sJzIwMCcpIT09ZmFsc2UpewogICAgICAgICAgICAkbXNnW10gPSAiPHA+L3BsdXMvdm90ZS5waHDvvIjmipXnpajvvInvvIzlu7rorq7liKDpmaQ8L3A+IjsKICAgICAgICB9CiAgICAgICAgJGhlYWRlcj1nZXRfaGVhZGVycygkdGhpcy0+ZG9tYWluLicvcGx1cy9lcnJhZGRzYXZlLnBocCcpOwogICAgICAgIGlmKHN0cnN0cigkaGVhZGVyWzBdLCcyMDAnKSE9PWZhbHNlKXsKICAgICAgICAgICAgJG1zZ1tdID0gIjxwPi9wbHVzL2VycmFkZHNhdmUucGhw77yI5paH56ug5om+6ZSZ77yJ77yM5bu66K6u5Yig6ZmkPC9wPiI7CiAgICAgICAgfQoKICAgICAgICByZXR1cm4gJG1zZzsKICAgIH0KCiAgICAvKgogICAgKiDmo4DmtYvpk77mjqXmmK/lkKbmmK9TU0zov57mjqUKICAgICogQHJldHVybiBib29sCiAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBpc0h0dHBzKCl7CiAgICAgICAgaWYoIWlzc2V0KCRfU0VSVkVSWydIVFRQUyddKSkKICAgICAgICAgICAgcmV0dXJuIEZBTFNFOwogICAgICAgIGlmKCRfU0VSVkVSWydIVFRQUyddID09PSAxKXsgIC8vQXBhY2hlCiAgICAgICAgICAgIHJldHVybiBUUlVFOwogICAgICAgIH1lbHNlaWYoJF9TRVJWRVJbJ0hUVFBTJ10gPT09ICdvbicpeyAvL0lJUwogICAgICAgICAgICByZXR1cm4gVFJVRTsKICAgICAgICB9ZWxzZWlmKCRfU0VSVkVSWydTRVJWRVJfUE9SVCddID09IDQ0Myl7IC8v5YW25LuWCiAgICAgICAgICAgIHJldHVybiBUUlVFOwogICAgICAgIH0KICAgICAgICByZXR1cm4gRkFMU0U7CiAgICB9CgogICAgcHJpdmF0ZSBmdW5jdGlvbiBnZXRzaXplKCRzaXplLCAkZm9ybWF0ID0gJ2tiJykgewogICAgICAgICRwID0gMDsKICAgICAgICBpZiAoJGZvcm1hdCA9PSAna2InKSB7CiAgICAgICAgICAgICRwID0gMTsKICAgICAgICB9IGVsc2VpZiAoJGZvcm1hdCA9PSAnbWInKSB7CiAgICAgICAgICAgICRwID0gMjsKICAgICAgICB9IGVsc2VpZiAoJGZvcm1hdCA9PSAnZ2InKSB7CiAgICAgICAgICAgICRwID0gMzsKICAgICAgICB9CiAgICAgICAgJHNpemUgLz0gcG93KDEwMjQsICRwKTsKICAgICAgICByZXR1cm4gbnVtYmVyX2Zvcm1hdCgkc2l6ZSwgMyk7CiAgICB9CgogICAgZnVuY3Rpb24gc2V0TGFzdFJhbmsoJHJhbmspCiAgICB7CiAgICAgICAgJHR4dCA9IERFREVEQVRBLicvbW9kdWxlL2RlZGVzYWZlLnR4dCc7CiAgICAgICAgaWYoIWZpbGVfZXhpc3RzKCR0eHQpKQogICAgICAgIHsKICAgICAgICAgICAgJGZwID0gZm9wZW4oJHR4dCwndycpOwogICAgICAgICAgICAkdERhdGFbJ3JhbmsnXSA9ICRyYW5rOwogICAgICAgICAgICAkdERhdGFbJ3RpbWUnXSA9IGRhdGUoJ1ktbS1kIEg6aTpzJyk7CiAgICAgICAgICAgIGZ3cml0ZSgkZnAsc2VyaWFsaXplKCR0RGF0YSkpOwogICAgICAgICAgICBmY2xvc2UoJGZwKTsKICAgICAgICB9ZWxzZXsKICAgICAgICAgICAgJHREYXRhWydyYW5rJ10gPSAkcmFuazsKICAgICAgICAgICAgJHREYXRhWyd0aW1lJ10gPSBkYXRlKCdZLW0tZCBIOmk6cycpOwogICAgICAgICAgICAkZnAgPSBmb3BlbigkdHh0LCd3Jyk7CiAgICAgICAgICAgIGZ3cml0ZSgkZnAsc2VyaWFsaXplKCR0RGF0YSkpOwogICAgICAgICAgICBmY2xvc2UoJGZwKTsKICAgICAgICB9CiAgICB9Cn0KY2xhc3MgRmluZEZpbGUKewoKICAgIHB1YmxpYyAkZmlsZXMgPSBhcnJheSgpOyAgICAvLyDlrZjlgqjpgY3ljobnmoTmlofku7YKICAgIHByb3RlY3RlZCAkbWF4ZGVwdGg7ICAgICAgICAvLyDmkJzlr7vmt7HluqYsMOihqOekuuayoeaciemZkOWItgoKCiAgICAvKiAg6YGN5Y6G5paH5Lu25Y+K5paH5Lu25aS5CiAgICAqICAgQHBhcmFtIFN0cmluZyAkc3BhdGggICAgIOaWh+S7tuWkuei3r+W+hAogICAgKiAgIEBwYXJhbSBpbnQgICAgJG1heGRlcHRoICDmkJzlr7vmt7HluqYs6buY6K6k5pCc5a+75YWo6YOoCiAgICAqLwogICAgcHVibGljIGZ1bmN0aW9uIHByb2Nlc3MoJHNwYXRoLCAkbWF4ZGVwdGg9MCl7CiAgICAgICAgaWYoaXNzZXQoJG1heGRlcHRoKSAmJiBpc19udW1lcmljKCRtYXhkZXB0aCkgJiYgJG1heGRlcHRoPjApewogICAgICAgICAgICAkdGhpcy0+bWF4ZGVwdGggPSAkbWF4ZGVwdGg7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgICR0aGlzLT5tYXhkZXB0aCA9IDA7CiAgICAgICAgfQogICAgICAgICR0aGlzLT5maWxlcyA9IGFycmF5KCk7CiAgICAgICAgJHRoaXMtPnRyYXZlcnNpbmcoJHNwYXRoKTsgLy8g6YGN5Y6GCiAgICB9CgoKICAgIC8qICDpgY3ljobmlofku7blj4rmlofku7blpLkKICAgICogICBAcGFyYW0gU3RyaW5nICRzcGF0aCDmlofku7blpLnot6/lvoQKICAgICogICBAcGFyYW0gaW50ICAgICRkZXB0aCDlvZPliY3mlofku7blpLnmt7HluqYKICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIHRyYXZlcnNpbmcoJHNwYXRoLCAkZGVwdGg9MSl7CiAgICAgICAgaWYoJGhhbmRsZSA9IG9wZW5kaXIoJHNwYXRoKSl7CiAgICAgICAgICAgIHdoaWxlKCgkZmlsZT1yZWFkZGlyKCRoYW5kbGUpKSE9PWZhbHNlKXsKICAgICAgICAgICAgICAgIGlmKCRmaWxlIT0nLicgJiYgJGZpbGUhPScuLicpewogICAgICAgICAgICAgICAgICAgICRjdXJmaWxlID0gJHNwYXRoLicvJy4kZmlsZTsKICAgICAgICAgICAgICAgICAgICAkY3VyZmlsZSA9IHN0cl9yZXBsYWNlKCdcXCcsJy8nLCRjdXJmaWxlKTsKICAgICAgICAgICAgICAgICAgICBpZihpc19kaXIoJGN1cmZpbGUpKXsgLy8gZGlyCiAgICAgICAgICAgICAgICAgICAgICAgIGlmKCR0aGlzLT5tYXhkZXB0aD09MCB8fCAkZGVwdGg8JHRoaXMtPm1heGRlcHRoKXsgLy8g5Yik5pat5rex5bqmCiAgICAgICAgICAgICAgICAgICAgICAgICAgICAkdGhpcy0+dHJhdmVyc2luZygkY3VyZmlsZSwgJGRlcHRoKzEpOwogICAgICAgICAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgICAgICAgICAgfWVsc2V7ICAvLyBmaWxlCiAgICAgICAgICAgICAgICAgICAgICAgICR0aGlzLT5oYW5kbGUoJGN1cmZpbGUpOwogICAgICAgICAgICAgICAgICAgIH0KCiAgICAgICAgICAgICAgICB9CiAgICAgICAgICAgIH0KICAgICAgICAgICAgY2xvc2VkaXIoJGhhbmRsZSk7CiAgICAgICAgfQogICAgfQoKCiAgICAvKiog5aSE55CG5paH5Lu25pa55rOVCiAgICAgKiAgQHBhcmFtIFN0cmluZyAkZmlsZSDmlofku7bot6/lvoQKICAgICAqLwogICAgcHJvdGVjdGVkIGZ1bmN0aW9uIGhhbmRsZSgkZmlsZSl7CiAgICAgICAgYXJyYXlfcHVzaCgkdGhpcy0+ZmlsZXMsICRmaWxlKTsKICAgIH0KCn0gLy8gY2xhc3MgZW5kCmNsYXNzIFVuc2V0Qm9tIGV4dGVuZHMgRmluZEZpbGV7IC8vIGNsYXNzIHN0YXJ0CgogICAgcHJpdmF0ZSAkZmlsZXR5cGUgPSBhcnJheSgpOyAvLyDpnIDopoHlpITnkIbnmoTmlofku7bnsbvlnosKCgogICAgLy8g5Yid5aeL5YyWCiAgICBwdWJsaWMgZnVuY3Rpb24gX19jb25zdHJ1Y3QoJGZpbGV0eXBlPWFycmF5KCkpewogICAgICAgIGlmKCRmaWxldHlwZSl7CiAgICAgICAgICAgICR0aGlzLT5maWxldHlwZSA9ICRmaWxldHlwZTsKICAgICAgICB9CiAgICB9CgoKICAgIC8qKiDph43lhplGaW5kRmlsZSBoYW5kbGXmlrnms5UKICAgICAqICAgQHBhcmFtICBTdHJpbmcgJGZpbGUg5paH5Lu26Lev5b6ECiAgICAgKi8KICAgIHByb3RlY3RlZCBmdW5jdGlvbiBoYW5kbGUoJGZpbGUpewogICAgICAgIGlmKCR0aGlzLT5jaGVja19leHQoJGZpbGUpKXsKICAgICAgICAgICAgaWYoJHRoaXMtPmNoZWNrX3V0Zjhib20oJGZpbGUpKSAkdGhpcy0+Y2xlYXJfdXRmOGJvbSgkZmlsZSk7ICAgICAgICAvLyBjbGVhcgogICAgICAgICAgICBhcnJheV9wdXNoKCR0aGlzLT5maWxlcywgJGZpbGUpOyAgICAvLyBzYXZlIGxvZwogICAgICAgIH0KICAgIH0KCgogICAgLyoqIOajgOafpeaWh+S7tuaYr+WQpnV0ZjgrYm9tCiAgICAgKiAgIEBwYXJhbSAgU3RyaW5nICRmaWxlIOaWh+S7tui3r+W+hAogICAgICogICBAcmV0dXJuIGJvb2xlYW4KICAgICAqLwogICAgcHJpdmF0ZSBmdW5jdGlvbiBjaGVja191dGY4Ym9tKCRmaWxlKXsKICAgICAgICAkY29udGVudCA9IGZpbGVfZ2V0X2NvbnRlbnRzKCRmaWxlKTsKICAgICAgICByZXR1cm4gb3JkKHN1YnN0cigkY29udGVudCwwLDEpKT09PTB4RUYgJiYgb3JkKHN1YnN0cigkY29udGVudCwxLDEpKT09PTB4QkIgJiYgb3JkKHN1YnN0cigkY29udGVudCwyLDEpKT09PTB4QkY7CiAgICB9CgoKICAgIC8qKiDmuIXpmaR1dGY4K2JvbQogICAgICogICBAcGFyYW0gU3RyaW5nICRmaWxlIOaWh+S7tui3r+W+hAogICAgICovCiAgICBwcml2YXRlIGZ1bmN0aW9uIGNsZWFyX3V0Zjhib20oJGZpbGUpewogICAgICAgICRjb250ZW50ID0gZmlsZV9nZXRfY29udGVudHMoJGZpbGUpOwogICAgICAgIGZpbGVfcHV0X2NvbnRlbnRzKCRmaWxlLCBzdWJzdHIoJGNvbnRlbnQsMyksIHRydWUpOyAvLyDljrvmjonlpLTkuInkuKrlrZfoioIKICAgIH0KCgogICAgLyoqIOajgOafpeaWh+S7tuexu+WeiwogICAgICogICBAcGFyYW0gIFN0cmluZyAkZmlsZSDmlofku7bot6/lvoQKICAgICAqICAgQHJldHVybiBib29sZWFuCiAgICAgKi8KICAgIHByaXZhdGUgZnVuY3Rpb24gY2hlY2tfZXh0KCRmaWxlKXsKICAgICAgICAkYXJyID0gZXhwbG9kZSgnLicsYmFzZW5hbWUoJGZpbGUpKTsKICAgICAgICAkZXh0ID0gYXJyYXlfcG9wKCRhcnIpOwogICAgICAgICRmaWxlX2V4dCA9IHN0cnRvbG93ZXIoJGV4dCk7CiAgICAgICAgaWYoaW5fYXJyYXkoJGZpbGVfZXh0LCAkdGhpcy0+ZmlsZXR5cGUpKXsKICAgICAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgICAgfWVsc2V7CiAgICAgICAgICAgIHJldHVybiBmYWxzZTsKICAgICAgICB9CiAgICB9Cgp9IC8vIGNsYXNzIGVuZA==
</file>
</modulefiles>
</module>
